{"mappings":"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","sources":["js/game.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\r\n  console.log(\"DOM fully loaded\");\r\n\r\n  const puzzleArea = document.getElementById(\"puzzle_game\");\r\n  const completePopup = document.getElementById(\"complete_popup\");\r\n  const gridSize = 3;\r\n  let pieces = [];\r\n  let selectedPiece = null;\r\n  let startPosition = null;\r\n\r\n  // 이미지 경로 배열 (실제 이미지 경로로 대체)\r\n  const imagePaths = [\r\n    \"./css/img/mural_1.png\",\r\n    \"./css/img/mural_2.png\",\r\n    \"./css/img/mural_3.png\",\r\n    \"./css/img/mural_4.png\",\r\n    \"./css/img/mural_5.png\",\r\n    \"./css/img/mural_6.png\",\r\n    \"./css/img/mural_7.png\",\r\n    \"./css/img/mural_8.png\",\r\n    \"./css/img/mural_9.png\",\r\n  ];\r\n\r\n  // 퍼즐 조각 크기와 간격 계산\r\n  function calculatePieceSize() {\r\n    const puzzleWidth = puzzleArea.offsetWidth; // 퍼즐 영역의 가로 크기\r\n    const pieceSize = Math.floor(puzzleWidth / gridSize); // 퍼즐 조각의 크기\r\n    const gridSpacing = 0; // 여백 없애기 위해 gridSpacing을 0으로 설정\r\n\r\n    return { pieceSize, gridSpacing };\r\n  }\r\n\r\n  // 퍼즐 조각 생성\r\n  function createPieces() {\r\n    // 퍼즐 영역에 기존 조각이 있으면 모두 제거\r\n    pieces.forEach((piece) => piece.remove());\r\n    pieces = [];\r\n\r\n    const placedPositions = new Set();\r\n    const { pieceSize, gridSpacing } = calculatePieceSize();\r\n\r\n    for (let i = 0; i < gridSize * gridSize; i++) {\r\n      const piece = document.createElement(\"div\");\r\n      piece.className = \"puzzle_piece\";\r\n\r\n      // 이미지 요소 생성\r\n      const img = document.createElement(\"img\");\r\n      img.src = imagePaths[i];\r\n      img.style.width = \"100%\";\r\n      img.style.height = \"100%\";\r\n      img.style.objectFit = \"cover\";\r\n\r\n      // 이미지를 퍼즐 조각에 추가\r\n      piece.appendChild(img);\r\n\r\n      let randomCol, randomRow, positionKey;\r\n      do {\r\n        randomCol = Math.floor(Math.random() * gridSize);\r\n        randomRow = Math.floor(Math.random() * gridSize);\r\n        positionKey = `${randomCol},${randomRow}`;\r\n      } while (placedPositions.has(positionKey));\r\n\r\n      placedPositions.add(positionKey);\r\n\r\n      // 초기 위치 설정\r\n      piece.style.left = `${randomCol * (pieceSize + gridSpacing)}px`;\r\n      piece.style.top = `${randomRow * (pieceSize + gridSpacing)}px`;\r\n      piece.dataset.col = randomCol;\r\n      piece.dataset.row = randomRow;\r\n\r\n      // 터치 및 마우스 이벤트 추가\r\n      piece.addEventListener(\"mousedown\", selectPiece);\r\n      piece.addEventListener(\"touchstart\", selectPiece);\r\n      pieces.push(piece);\r\n      puzzleArea.appendChild(piece);\r\n    }\r\n  }\r\n\r\n  // 퍼즐 조각 선택\r\n  function selectPiece(e) {\r\n    const event = e.touches ? e.touches[0] : e;\r\n    selectedPiece = e.target.closest(\".puzzle_piece\");\r\n    if (!selectedPiece) return;\r\n\r\n    const puzzleRect = puzzleArea.getBoundingClientRect();\r\n\r\n    startPosition = {\r\n      x: parseInt(selectedPiece.style.left),\r\n      y: parseInt(selectedPiece.style.top),\r\n    };\r\n\r\n    const offsetX = event.clientX - puzzleRect.left - startPosition.x;\r\n    const offsetY = event.clientY - puzzleRect.top - startPosition.y;\r\n\r\n    startPosition.offsetX = offsetX;\r\n    startPosition.offsetY = offsetY;\r\n\r\n    selectedPiece.style.zIndex = \"1000\"; // z-index를 높여서 선택된 조각이 앞에 오도록 설정\r\n    document.addEventListener(\"mousemove\", movePiece);\r\n    document.addEventListener(\"touchmove\", movePiece, { passive: false });\r\n    document.addEventListener(\"mouseup\", dropPiece);\r\n    document.addEventListener(\"touchend\", dropPiece);\r\n    e.preventDefault();\r\n  }\r\n\r\n  // 퍼즐 조각 이동\r\n  function movePiece(e) {\r\n    if (selectedPiece) {\r\n      const event = e.touches ? e.touches[0] : e;\r\n      const puzzleRect = puzzleArea.getBoundingClientRect();\r\n      const { pieceSize, gridSpacing } = calculatePieceSize();\r\n\r\n      let newX = event.clientX - puzzleRect.left - startPosition.offsetX;\r\n      let newY = event.clientY - puzzleRect.top - startPosition.offsetY;\r\n\r\n      // 새 위치가 퍼즐 영역 안에 있도록 제한\r\n      newX = Math.max(0, Math.min(newX, puzzleArea.offsetWidth - pieceSize));\r\n      newY = Math.max(0, Math.min(newY, puzzleArea.offsetHeight - pieceSize));\r\n\r\n      // 그리드에 맞춰 위치를 맞추기\r\n      const gridX =\r\n        Math.round(newX / (pieceSize + gridSpacing)) *\r\n        (pieceSize + gridSpacing);\r\n      const gridY =\r\n        Math.round(newY / (pieceSize + gridSpacing)) *\r\n        (pieceSize + gridSpacing);\r\n\r\n      selectedPiece.style.left = `${gridX}px`;\r\n      selectedPiece.style.top = `${gridY}px`;\r\n    }\r\n  }\r\n\r\n  // 퍼즐 조각 드롭\r\n  function dropPiece() {\r\n    if (selectedPiece) {\r\n      const currentX = parseInt(selectedPiece.style.left);\r\n      const currentY = parseInt(selectedPiece.style.top);\r\n\r\n      const targetPiece = pieces.find(\r\n        (piece) =>\r\n          piece !== selectedPiece &&\r\n          parseInt(piece.style.left) === currentX &&\r\n          parseInt(piece.style.top) === currentY\r\n      );\r\n\r\n      if (targetPiece) {\r\n        const targetX = parseInt(targetPiece.style.left);\r\n        const targetY = parseInt(targetPiece.style.top);\r\n\r\n        targetPiece.style.left = `${startPosition.x}px`;\r\n        targetPiece.style.top = `${startPosition.y}px`;\r\n\r\n        selectedPiece.style.left = `${targetX}px`;\r\n        selectedPiece.style.top = `${targetY}px`;\r\n      } else {\r\n        selectedPiece.style.left = `${startPosition.x}px`;\r\n        selectedPiece.style.top = `${startPosition.y}px`;\r\n      }\r\n\r\n      selectedPiece.style.zIndex = \"\";\r\n      selectedPiece = null;\r\n\r\n      checkCompletion(); // 퍼즐이 완성되었는지 확인\r\n    }\r\n\r\n    document.removeEventListener(\"mousemove\", movePiece);\r\n    document.removeEventListener(\"touchmove\", movePiece);\r\n    document.removeEventListener(\"mouseup\", dropPiece);\r\n    document.removeEventListener(\"touchend\", dropPiece);\r\n  }\r\n\r\n  // 퍼즐 완성 확인\r\n  function checkCompletion() {\r\n    let completed = true;\r\n    for (let i = 0; i < pieces.length; i++) {\r\n      const { pieceSize, gridSpacing } = calculatePieceSize();\r\n      const expectedX = (i % gridSize) * (pieceSize + gridSpacing);\r\n      const expectedY = Math.floor(i / gridSize) * (pieceSize + gridSpacing);\r\n      const actualX = parseInt(pieces[i].style.left);\r\n      const actualY = parseInt(pieces[i].style.top);\r\n\r\n      if (actualX !== expectedX || actualY !== expectedY) {\r\n        completed = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (completed) {\r\n      showCompletePopup();\r\n    }\r\n  }\r\n\r\n  // 퍼즐 완성 팝업 표시\r\n  function showCompletePopup() {\r\n    completePopup.classList.add(\"on\");\r\n    puzzleArea.classList.add(\"on\");\r\n    disablePieces();\r\n  }\r\n\r\n  // 퍼즐 조각 이동 불가 상태로 설정\r\n  function disablePieces() {\r\n    pieces.forEach((piece) => {\r\n      piece.style.cursor = \"default\";\r\n      piece.removeEventListener(\"mousedown\", selectPiece);\r\n      piece.removeEventListener(\"touchstart\", selectPiece);\r\n    });\r\n\r\n    // <div class=\"txt\"> 내용 변경\r\n    const txtDiv = document.querySelector(\".puzzle_area .txt\");\r\n    if (txtDiv) {\r\n      txtDiv.innerHTML = \"<div class='on'>성공이오!</div>\";\r\n    }\r\n  }\r\n\r\n  createPieces(); // 퍼즐 조각 생성\r\n\r\n  // 윈도우 크기 변경 시 퍼즐 크기 재계산\r\n  window.addEventListener(\"resize\", function () {\r\n    createPieces(); // 크기 변경 시 퍼즐을 새로 만들어서 다시 배치\r\n  });\r\n});\r\n"],"names":[],"version":3,"file":"index.fb67f16b.js.map","sourceRoot":"/__parcel_source_root/"}